{"creationTimeStamp":"2024-02-04T23:51:41.470Z","modifiedTimeStamp":"2024-02-05T01:15:35.240Z","createdBy":"Stu.Sztukowski@sas.com","modifiedBy":"Stu.Sztukowski@sas.com","version":2,"id":null,"name":"Keystone.flw","description":null,"properties":{"UI_PROP_DF_OPTIMIZE":"false","UI_PROP_DF_ID":"d2585f63-39c2-4704-9145-ae9312f0961e","UI_PROP_DF_EXECUTION_ORDERED":"false"},"links":[{"method":"GET","rel":"self","href":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","uri":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","type":"application/vnd.sas.data.flow"},{"method":"GET","rel":"alternate","href":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","uri":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","type":"application/vnd.sas.data.flow.summary"},{"method":"GET","rel":"up","href":"/dataFlows/dataFlows","uri":"/dataFlows/dataFlows","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","uri":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","type":"application/vnd.sas.data.flow","responseType":"application/vnd.sas.data.flow"},{"method":"DELETE","rel":"delete","href":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","uri":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a"},{"method":"GET","rel":"transferExport","href":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","uri":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","uri":"/dataFlows/dataFlows/2935114b-92cd-458d-b204-25a22c09da7a","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"nodes":{"id-1707086364771-570":{"nodeType":"step","version":1,"id":"id-1707086364771-570","name":"Setup / Define Functions","note":{"version":1,"id":"id-1707086364783-574","name":null,"description":null,"properties":{"UI_NOTE_PROP_HEIGHT":"0","UI_NOTE_PROP_IS_EXPANDED":"false","UI_NOTE_PROP_IS_STICKYNOTE":"false","UI_NOTE_PROP_WIDTH":"0"}},"priority":2,"properties":{"UI_PROP_COLORGRP":"0","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_NODE_DATA_ID":"ab59f8c4-af9a-4608-a5d5-a8365357bb99","UI_PROP_NODE_DATA_MODIFIED_DATE":"1694874167518","UI_PROP_PORT_DESCRIPTION|inTables|0":"Input tables","UI_PROP_PORT_DESCRIPTION|outTables|0":"Output tables","UI_PROP_PORT_ID|inTables|0":"3ee109d2-9ddf-4a20-8810-650549758b89","UI_PROP_PORT_ID|outTables|0":"4311c6b9-19f9-4172-bd62-d266d4fe9b18","UI_PROP_PORT_LABEL|inTables|0":"Input table 1","UI_PROP_PORT_LABEL|outTables|0":"Output table 1","UI_PROP_XPOS":"51","UI_PROP_YPOS":"100"},"portMappings":[{"mappingType":"tableStructure","portName":"outTables","portIndex":0,"tableStructure":{"columnDefinitions":null}}],"stepReference":{"type":"uri","path":"/dataFlows/steps/ab59f8c4-af9a-4608-a5d5-a8365357bb99"},"arguments":{"codeOptions":{"code":"import pandas as pd\nimport json\nimport os\nimport xml.etree.ElementTree as ET\nfrom dateutil import parser\n\n############### Setup ###############\n\n# Base location of the data\nbase = os.path.join(os.getcwd(), 'data')\n\n# Individual data folders\nhr_loc       = base + '/biometrics/hr'\nhr_var_loc   = base + '/biometrics/hr_variability'\nspo2_loc     = base + '/biometrics/spo2'\nspo2_var_loc = base + '/biometrics/spo2_variability'\ngps_loc      = base + '/gps'\n\n############### End Setup ###############\n\n# Reads JSON heartrate data from a location and returns a dataframe\ndef read_bio_json(loc):\n    df_list  = []\n    filelist = [f for f in os.listdir(loc) if f.endswith('.json')]\n    \n    for filename in filelist:\n        f = os.path.join(loc, filename)\n        with open(f, 'r') as file:\n            data = json.load(file)\n        \n        df = pd.json_normalize(data, sep='_')\n        df.columns = df.columns.str.lower().str.replace('value_', '')\n        df['datetime'] = pd.to_datetime(df['datetime'], format='%m/%d/%y %H:%M:%S')\n        df_list.append(df)\n        \n    # Final heartrate dataframe \n    return pd.concat(df_list, ignore_index=True)\n    \n# Reads biometric CSV files from a location and returns a dataframe\ndef read_bio_csv(loc):    \n    df_list  = []\n    filelist = [f for f in os.listdir(loc) if f.endswith('.csv')]\n    \n    for filename in filelist:\n        f = os.path.join(loc, filename)\n        with open(f, 'r') as file:\n            df = ( pd.read_csv(f, parse_dates=['timestamp'])\n                     .rename({'timestamp':'datetime'}, axis=1)\n                 )\n        \n        df_list.append(df)\n        \n    # Final heartrate dataframe \n    return pd.concat(df_list, ignore_index=True)\n\n\n\n''' Read GPS data in GPX format without needing to import a separate GPX \n    package. GPX data looks like this:\n        \n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <gpx xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:gte=\"http://www.gpstrackeditor.com/xmlschemas/General/1\" xsi:schemaLocation=\"http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd\" version=\"1.1\" creator=\"Slopes for Android - http://getslopes.com\">\n      <trk>\n        <name>Jan 25, 2024 - Keystone Resort</name>\n        <trkseg>\n          <trkpt lat=\"39.605675\" lon=\"-105.941414\">\n            <ele>2856.891977</ele>\n            <time>2024-01-25T09:13:52.453-07:00</time>\n            <hdop>19</hdop>\n            <vdop>4</vdop>\n            <extensions>\n              <gte:gps speed=\"1.317580\" azimuth=\"212.300003\"/>\n            </extensions>\n          </trkpt>\n       </trkseg>\n      </trk>\n    </gpx>\n    \n    There are two namespaces we need to use:\n        1. The gpx namespace: http://www.topografix.com/GPX/1/1\n        2. The gte namespace http://www.gpstrackeditor.com/xmlschemas/General/1\n        \n    The gte namespace is used to extract gps and azimuth data from the \n    <extensions> tag\n'''\n\ndef read_gpx(loc):\n    gpx_namespace = '{http://www.topografix.com/GPX/1/1}'\n    gte_namespace = '{http://www.gpstrackeditor.com/xmlschemas/General/1}'\n    \n    data     = []\n    filelist = [f for f in os.listdir(loc) if f.endswith('.gpx')]\n    \n    for filename in filelist:\n        f    = os.path.join(gps_loc, filename)\n        root = ET.parse(f)\n        \n        for trkpt in root.findall(f'.//{gpx_namespace}trkpt'):\n            row = {\n                \"datetime\": parser.parse(trkpt.find(f'{gpx_namespace}time').text),\n                \"lat\": float(trkpt.get(\"lat\")),\n                \"lon\": float(trkpt.get(\"lon\")),\n                \"elevation\": float(trkpt.find(f'{gpx_namespace}ele').text),\n                \"speed\": float(trkpt.find(f'.//{gpx_namespace}extensions/{gte_namespace}gps').get(\"speed\")),\n                \"azimuth\": float(trkpt.find(f'.//{gpx_namespace}extensions/{gte_namespace}gps').get(\"azimuth\"))\n            }\n        \n            data.append(row)\n    \n    # Final GPS dataframe\n    return pd.DataFrame(data)","contentType":"embedded","logHTML":"","resultsHTML":"","variables":[{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}},{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}}]}}},"id-1707086459998-912":{"nodeType":"step","version":1,"id":"id-1707086459998-912","name":"Read Biometric Data","note":{"version":1,"id":"id-1707086459999-916","name":null,"description":null,"properties":{"UI_NOTE_PROP_HEIGHT":"0","UI_NOTE_PROP_IS_EXPANDED":"false","UI_NOTE_PROP_IS_STICKYNOTE":"false","UI_NOTE_PROP_WIDTH":"0"}},"priority":0,"properties":{"UI_PROP_COLORGRP":"0","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_NODE_DATA_ID":"ab59f8c4-af9a-4608-a5d5-a8365357bb99","UI_PROP_NODE_DATA_MODIFIED_DATE":"1694874167518","UI_PROP_PORT_DESCRIPTION|inTables|0":"Input tables","UI_PROP_PORT_DESCRIPTION|outTables|0":"Output tables","UI_PROP_PORT_ID|inTables|0":"bea3174a-5909-4a4e-b4f5-6fe313a502b2","UI_PROP_PORT_ID|outTables|0":"edfab3a4-f763-4c2b-964a-d527cb1cb5df","UI_PROP_PORT_LABEL|inTables|0":"Input table 1","UI_PROP_PORT_LABEL|outTables|0":"Output table 1","UI_PROP_XPOS":"192","UI_PROP_YPOS":"49"},"portMappings":[{"mappingType":"tableStructure","portName":"outTables","portIndex":0,"tableStructure":{"columnDefinitions":null}}],"stepReference":{"type":"uri","path":"/dataFlows/steps/ab59f8c4-af9a-4608-a5d5-a8365357bb99"},"arguments":{"codeOptions":{"code":"######## Read in all biometric data ########\ndf_hr       = read_bio_json(base + '/biometrics/hr')\ndf_hr_var   = read_bio_csv(base + '/biometrics/hr_variability')\ndf_spo2     = read_bio_csv(base + '/biometrics/spo2')\ndf_spo2_var = read_bio_csv(base + '/biometrics/spo2_variability')\n\n# Send all hr to SAS\nSAS.df2sd(df_hr, 'heartrate')\nSAS.df2sd(df_hr_var, 'heartrate_variability')\nSAS.df2sd(df_spo2, 'spo2')\nSAS.df2sd(df_spo2, 'spo2_variability')","contentType":"embedded","logHTML":"","resultsHTML":"","variables":[{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}},{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}}]}}},"id-1707086502239-1044":{"nodeType":"step","version":1,"id":"id-1707086502239-1044","name":"Read GPS Data","note":{"version":1,"id":"id-1707086502242-1048","name":null,"description":null,"properties":{"UI_NOTE_PROP_HEIGHT":"0","UI_NOTE_PROP_IS_EXPANDED":"false","UI_NOTE_PROP_IS_STICKYNOTE":"false","UI_NOTE_PROP_WIDTH":"0"}},"priority":4,"properties":{"UI_PROP_COLORGRP":"0","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_NODE_DATA_ID":"ab59f8c4-af9a-4608-a5d5-a8365357bb99","UI_PROP_NODE_DATA_MODIFIED_DATE":"1694874167518","UI_PROP_PORT_DESCRIPTION|inTables|0":"Input tables","UI_PROP_PORT_DESCRIPTION|outTables|0":"Output tables","UI_PROP_PORT_ID|inTables|0":"9db4bc2c-7878-4946-9807-c4997047f12c","UI_PROP_PORT_ID|outTables|0":"1993a372-3c75-4000-8ba5-e03c84fee310","UI_PROP_PORT_LABEL|inTables|0":"Input table 1","UI_PROP_PORT_LABEL|outTables|0":"Output table 1","UI_PROP_XPOS":"194","UI_PROP_YPOS":"159"},"portMappings":[{"mappingType":"tableStructure","portName":"outTables","portIndex":0,"tableStructure":{"columnDefinitions":null}}],"stepReference":{"type":"uri","path":"/dataFlows/steps/ab59f8c4-af9a-4608-a5d5-a8365357bb99"},"arguments":{"codeOptions":{"code":"######## Read in all GPS data ########\ndf_gps = read_gpx(gps_loc)\n\n# Send GPS data to SAS\nSAS.df2sd(df_gps, 'gps')","contentType":"embedded","logHTML":"","resultsHTML":"","variables":[{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}},{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}}]}}},"id-1707090664336-2035":{"nodeType":"step","version":1,"id":"id-1707090664336-2035","name":"Download Data","note":{"version":1,"id":"id-1707090664338-2039","name":null,"description":null,"properties":{"UI_NOTE_PROP_HEIGHT":"0","UI_NOTE_PROP_IS_EXPANDED":"false","UI_NOTE_PROP_IS_STICKYNOTE":"false","UI_NOTE_PROP_WIDTH":"0"}},"priority":1,"properties":{"UI_PROP_COLORGRP":"0","UI_PROP_INPUT_PORT|inTables|0":"9407c2f1-847a-4473-b2f9-d2a1ed7560b6|Input table 1|Input tables","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_NODE_DATA_ID":"ab59f8c4-af9a-4608-a5d5-a8365357bb99","UI_PROP_NODE_DATA_MODIFIED_DATE":"1694874167518","UI_PROP_PORT_DESCRIPTION|outTables|0":"Output tables","UI_PROP_PORT_ID|outTables|0":"a5f4c4c3-9edd-43e4-886b-3caaa53e55c7","UI_PROP_PORT_LABEL|outTables|0":"Output table 1","UI_PROP_XPOS":"-83","UI_PROP_YPOS":"100"},"portMappings":[{"mappingType":"tableStructure","portName":"outTables","portIndex":0,"tableStructure":{"columnDefinitions":null}}],"stepReference":{"type":"uri","path":"/dataFlows/steps/ab59f8c4-af9a-4608-a5d5-a8365357bb99"},"arguments":{"codeOptions":{"code":"import os\nfrom urllib.request import urlopen\nfrom zipfile import ZipFile\nfrom io import BytesIO\n\n# Download and unzip data to each directory\nbase_url = \"https://github.com/stu-code/viz/raw/main/keystone/data\"\n\nfile_list = [\"/biometrics/hr/hr.zip\",\n\t\t\t \"/biometrics/hr_variability/hr_variability.zip\",\n\t\t\t \"/biometrics/spo2/spo2.zip\",\n\t\t\t \"/biometrics/spo2_variability/spo2_variability.zip\",\n\t\t\t \"/gps/gps.zip\"\n\t\t\t]\n\n# Downloads and extracts all of the data to the following directories:\n# ./biometrics/hr\n# ./biometrics/hr_variability\n# ./biometrics/spo2\n# ./biometrics/spo2_variability\n# ./gps\n\nfor file in file_list:\n\toutpath = 'data/' + file.rsplit('/', 1)[0]\n\tos.makedirs(path, exist_ok=True)\n\n\turl = base_url + file\n\tresp = urlopen(url)\n\tzipfile = ZipFile(BytesIO(resp.read()))\n\tzipfile.extractall(path=outpath)","contentType":"embedded","logHTML":"","resultsHTML":"","variables":[{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}},{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}}]}}},"id-1707093956843-8321":{"nodeType":"step","version":1,"id":"id-1707093956843-8321","name":"Round and Reformat","note":{"version":1,"id":"id-1707093956843-8325","name":null,"description":null,"properties":{"UI_NOTE_PROP_HEIGHT":"0","UI_NOTE_PROP_IS_EXPANDED":"false","UI_NOTE_PROP_IS_STICKYNOTE":"false","UI_NOTE_PROP_WIDTH":"0"}},"priority":3,"properties":{"UI_PROP_COLORGRP":"0","UI_PROP_IS_INPUT_EXPANDED":"false","UI_PROP_IS_OUTPUT_EXPANDED":"false","UI_PROP_NODE_DATA_ID":"a7190700-f59c-4a94-afe2-214ce639fcde","UI_PROP_NODE_DATA_MODIFIED_DATE":"1694874160844","UI_PROP_OUTPUT_PORT|outTables|0":"be28db0a-a5f0-47f5-a699-e57e54348bfb|Output table 1|Output tables","UI_PROP_PORT_DESCRIPTION|inTables|0":"Input tables","UI_PROP_PORT_DESCRIPTION|inTables|1":"Input tables","UI_PROP_PORT_ID|inTables|0":"5dedccca-9b52-4544-b77e-24c729ac4c91","UI_PROP_PORT_ID|inTables|1":"617cf6e9-a2d6-4802-9c96-434ee29a0e0e","UI_PROP_PORT_LABEL|inTables|0":"Input table 1","UI_PROP_PORT_LABEL|inTables|1":"Input table 2","UI_PROP_XPOS":"337","UI_PROP_YPOS":"100"},"portMappings":[{"mappingType":"tableStructure","portName":"outTables","portIndex":0,"tableStructure":{"columnDefinitions":null}}],"stepReference":{"type":"uri","path":"/dataFlows/steps/a7190700-f59c-4a94-afe2-214ce639fcde"},"arguments":{"codeOptions":{"code":"/* Align all data to the nearest second and reformat */\n\n%macro round_and_reformat(dslist);\n\t%do i = 1 %to %sysfunc(countw(&dslist));\n\t\t%let dsn = %scan(&dslist, &i);\n\t\t\n\t\tdata &dsn;\n\t\t\tformat datetime mdyampm.;\n\t\t\tset &dsn;\n\t\t\tdatetime = round(datetime);\n\t\trun;\n\t%end;\n%mend;\n%round_and_reformat(gps heartrate heartrate_variability \n\t\t\t\t\tspo2 spo2_variability\n\t\t\t\t   )\n\n\n\tcreate table bio_and_gps as\n\t\tselect gps.datetime\n\t\t\t , hr.bpm\n\t\t\t , hr.confidence as hr_confidence\n\t\t\t , hrvar.rmssd\n\t\t\t , hrvar.coverage as hr_var_coverage\n\t\t\t , hrvar.low_frequency as hr_var_low_frequency\n\t\t\t , hrvar.high_frequency as hr_var_high_frequency\n\t\t\t , spo2.value as spo2\n\t\t\t , spo2var.value as spo2_variability\n\t\tfrom gps\n\t\tLEFT JOIN\n\t\t\t heartrate as hr\n\t\tON gps.datetime = hr.datetime\n\t\tLEFT JOIN\n\t\t\t heartrate_variability as hrvar\n\t\tON gps.datetime = hrvar.datetime\n\t\tLEFT JOIN\n\t\t\t spo2\n\t\tON gps.datetime = spo2.datetime\n\t\tLEFT JOIN\n\t\t\t spo2_variability as spo2var\n\t\tON gps.datetime = spo2var.datetime\n\t;\nquit;","contentType":"embedded","logHTML":"","resultsHTML":"","variables":[{"name":"_input1","value":{"portIndex":0,"portName":"inTables","referenceType":"inputPort"}},{"name":"_input2","value":{"portIndex":1,"portName":"inTables","referenceType":"inputPort"}},{"name":"_output1","value":{"arguments":{},"portIndex":0,"portName":"outTables","referenceType":"outputPort"}}]}}}},"parameters":{},"connections":[{"sourcePort":{"node":"id-1707086364771-570","portName":"outTables","index":0},"targetPort":{"node":"id-1707086459998-912","portName":"inTables","index":0}},{"sourcePort":{"node":"id-1707086364771-570","portName":"outTables","index":0},"targetPort":{"node":"id-1707086502239-1044","portName":"inTables","index":0}},{"sourcePort":{"node":"id-1707090664336-2035","portName":"outTables","index":0},"targetPort":{"node":"id-1707086364771-570","portName":"inTables","index":0}},{"sourcePort":{"node":"id-1707086502239-1044","portName":"outTables","index":0},"targetPort":{"node":"id-1707093956843-8321","portName":"inTables","index":1}},{"sourcePort":{"node":"id-1707086459998-912","portName":"outTables","index":0},"targetPort":{"node":"id-1707093956843-8321","portName":"inTables","index":0}}],"extendedProperties":{},"stickyNotes":[]}